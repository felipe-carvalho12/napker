{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\felip\\\\CodeProjects\\\\Web\\\\Napker\\\\frontend\\\\src\\\\pages\\\\messages_\\\\components\\\\chat_\\\\Chat.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { csrftoken } from '../../../../config/utils';\nimport { SERVER_URL } from '../../../../config/settings';\nimport WebSocketInstance from '../../Websocket';\nimport SendMessageForm from './components/SendMessageForm';\nimport MessageListItem from './components/MessageListItem';\n\nclass Chat extends React.Component {\n  initialiseChat() {\n    console.log('initializing chat...');\n    this.waitForSocketConnection(() => {\n      WebSocketInstance.addCallbacks(this.getMessages.bind(this), this.addMessage.bind(this));\n      WebSocketInstance.fetchMessages(this.props.username, this.props.chatId);\n    });\n    if (this.props.chatId) WebSocketInstance.connect(this.props.chatId);\n  }\n\n  constructor(_props) {\n    super(_props);\n\n    this.handleComponentChange = () => {\n      if (this.state.otherUsername && (!this.state.otherProfile || this.state.otherProfile.user.username !== this.state.otherUsername)) {\n        fetch(`${SERVER_URL}/profile-api/user/${this.state.otherUsername}`).then(response => response.json()).then(data => this.setState({\n          otherProfile: data\n        }));\n      }\n\n      if (!this.state.myProfile) {\n        fetch(`${SERVER_URL}/profile-api/myprofile`).then(response => response.json()).then(data => this.setState({\n          myProfile: data\n        }));\n      }\n\n      if (this.state.messages.length && !this.state.scrolledToBottom && document.querySelectorAll('.sent, .received').length) {\n        this.scrollToBottom();\n      }\n    };\n\n    this.readMessages = props => {\n      fetch(`${SERVER_URL}/chat-api/read-messages`, {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json',\n          'X-CSRFToken': csrftoken\n        },\n        body: JSON.stringify({\n          chat_id: props.chatId\n        })\n      }).then(response => response.json()).then(data => {\n        console.log(data);\n        WebSocketInstance.readMessages(this.props.chatId);\n      });\n    };\n\n    this.scrollToBottom = () => {\n      if (document.querySelector('#chat-log')) {\n        const chatLog = document.querySelector('#chat-log');\n        chatLog.scrollTop = chatLog.scrollHeight;\n        this.setState({\n          scrolledToBottom: true\n        });\n      }\n    };\n\n    this.state = {\n      messages: [],\n      scrolledToBottom: false,\n      myProfile: null,\n      otherUsername: this.props.otherUsername,\n      otherProfile: null\n    };\n    this.initialiseChat();\n  }\n\n  componentDidMount() {\n    this.handleComponentChange();\n  }\n\n  componentDidUpdate() {\n    this.handleComponentChange();\n    document.querySelector('#contact-filter-input') && document.activeElement !== document.querySelector('#contact-filter-input') && document.querySelector('#chat-message-input') && document.querySelector('#chat-message-input').focus();\n  }\n\n  componentWillUnmount() {\n    WebSocketInstance.disconnect();\n  }\n\n  componentWillReceiveProps(newProps) {\n    if (newProps.chatId && newProps.chatId !== this.props.chatId && newProps.otherUsername && WebSocketInstance.state() !== 1) {\n      this.waitForSocketConnection(() => {\n        WebSocketInstance.fetchMessages(newProps.username, newProps.chatId);\n      });\n      WebSocketInstance.connect(newProps.chatId);\n      this.readMessages(newProps);\n      this.props.updateMessagesComponent();\n      this.setState({\n        messages: [],\n        scrolledToBottom: false\n      });\n    }\n\n    if (this.state.otherUsername !== newProps.otherUsername) {\n      this.setState({\n        otherUsername: newProps.otherUsername\n      });\n    }\n\n    if (this.props.updateUnreadMessagesNumber) {\n      this.props.updateUnreadMessagesNumber();\n    }\n\n    if (this.state.otherUsername && !newProps.otherUsername) {\n      WebSocketInstance.disconnect();\n      this.setState({\n        otherUsername: undefined,\n        otherProfile: undefined\n      });\n    }\n  }\n\n  waitForSocketConnection(callback) {\n    const component = this;\n    setTimeout(function () {\n      if (WebSocketInstance.state() === 1) {\n        console.log(\"Connection is made\");\n        callback();\n        return;\n      } else {\n        console.log(\"wait for connection...\");\n        component.waitForSocketConnection(callback);\n      }\n    }, 100);\n  }\n\n  getMessages(messages) {\n    this.setState({\n      messages: messages.reverse()\n    });\n  }\n\n  addMessage(message) {\n    this.setState({\n      messages: [...this.state.messages, message],\n      scrolledToBottom: false\n    });\n    this.readMessages(this.props);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.state.otherProfile !== null || !this.props.otherUsername ? /*#__PURE__*/React.createElement(React.Fragment, null, this.state.otherProfile ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"current-chat\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"current-chat-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fas fa-arrow-left left-arrow-icon\",\n      onClick: () => window.history.back(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Link, {\n      to: `/user/${this.state.otherProfile.slug}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: `${SERVER_URL}${this.state.otherProfile.photo}`,\n      className: \"profile-img-sm\",\n      style: {\n        marginRight: '5px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-column align-items-start\",\n      style: {\n        height: '52px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 41\n      }\n    }, this.state.otherProfile.first_name, \" \", this.state.otherProfile.last_name), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text-secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 41\n      }\n    }, \"@\", this.state.otherProfile.user.username))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"chat-log\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 33\n      }\n    }, this.state.messages.map(message => {\n      return /*#__PURE__*/React.createElement(MessageListItem, {\n        message: message,\n        currentUser: this.props.username,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 45\n        }\n      });\n    })), /*#__PURE__*/React.createElement(SendMessageForm, {\n      WebSocketInstance: WebSocketInstance,\n      chatId: this.props.chatId,\n      username: this.props.username,\n      otherProfile: this.state.otherProfile,\n      myProfile: this.state.myProfile,\n      updateMessagesComponent: this.props.updateMessagesComponent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 33\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"current-chat no-chat-selected\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      style: {\n        fontSize: 'larger'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 37\n      }\n    }, \"Voc\\xEA n\\xE3o tem uma conversa selecionada\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text-secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 37\n      }\n    }, \"Selecione uma existente ou comece uma nova\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: () => this.props.openModal(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 37\n      }\n    }, \"Nova conversa\")))) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat-loader-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 25\n      }\n    })));\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["C:/Users/felip/CodeProjects/Web/Napker/frontend/src/pages/messages_/components/chat_/Chat.js"],"names":["React","Link","csrftoken","SERVER_URL","WebSocketInstance","SendMessageForm","MessageListItem","Chat","Component","initialiseChat","console","log","waitForSocketConnection","addCallbacks","getMessages","bind","addMessage","fetchMessages","props","username","chatId","connect","constructor","handleComponentChange","state","otherUsername","otherProfile","user","fetch","then","response","json","data","setState","myProfile","messages","length","scrolledToBottom","document","querySelectorAll","scrollToBottom","readMessages","method","headers","body","JSON","stringify","chat_id","querySelector","chatLog","scrollTop","scrollHeight","componentDidMount","componentDidUpdate","activeElement","focus","componentWillUnmount","disconnect","componentWillReceiveProps","newProps","updateMessagesComponent","updateUnreadMessagesNumber","undefined","callback","component","setTimeout","reverse","message","render","window","history","back","slug","photo","marginRight","height","first_name","last_name","map","fontSize","openModal"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { csrftoken } from '../../../../config/utils'\r\nimport { SERVER_URL } from '../../../../config/settings'\r\nimport WebSocketInstance from '../../Websocket'\r\nimport SendMessageForm from './components/SendMessageForm'\r\nimport MessageListItem from './components/MessageListItem'\r\n\r\nclass Chat extends React.Component {\r\n    initialiseChat() {\r\n        console.log('initializing chat...')\r\n        this.waitForSocketConnection(() => {\r\n            WebSocketInstance.addCallbacks(\r\n                this.getMessages.bind(this),\r\n                this.addMessage.bind(this),\r\n            )\r\n            WebSocketInstance.fetchMessages(\r\n                this.props.username,\r\n                this.props.chatId\r\n            );\r\n        });\r\n        if (this.props.chatId) WebSocketInstance.connect(this.props.chatId)\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            messages: [],\r\n            scrolledToBottom: false,\r\n            myProfile: null,\r\n            otherUsername: this.props.otherUsername,\r\n            otherProfile: null\r\n        }\r\n        this.initialiseChat();\r\n    }\r\n\r\n    handleComponentChange = () => {\r\n        if (this.state.otherUsername && (!this.state.otherProfile || this.state.otherProfile.user.username !== this.state.otherUsername)) {\r\n            fetch(`${SERVER_URL}/profile-api/user/${this.state.otherUsername}`)\r\n                .then(response => response.json())\r\n                .then(data => this.setState({\r\n                    otherProfile: data\r\n                }))\r\n        }\r\n        if (!this.state.myProfile) {\r\n            fetch(`${SERVER_URL}/profile-api/myprofile`)\r\n                .then(response => response.json())\r\n                .then(data => this.setState({ myProfile: data }))\r\n        }\r\n        if (this.state.messages.length && !this.state.scrolledToBottom && document.querySelectorAll('.sent, .received').length) {\r\n            this.scrollToBottom()\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.handleComponentChange()\r\n    }\r\n\r\n\r\n    componentDidUpdate() {\r\n        this.handleComponentChange()\r\n        document.querySelector('#contact-filter-input') &&\r\n        document.activeElement !== document.querySelector('#contact-filter-input') &&\r\n        document.querySelector('#chat-message-input') &&\r\n        document.querySelector('#chat-message-input').focus()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        WebSocketInstance.disconnect()\r\n    }\r\n\r\n    componentWillReceiveProps(newProps) {\r\n        if (newProps.chatId && newProps.chatId !== this.props.chatId && newProps.otherUsername && WebSocketInstance.state() !== 1) {\r\n            this.waitForSocketConnection(() => {\r\n                WebSocketInstance.fetchMessages(\r\n                    newProps.username,\r\n                    newProps.chatId\r\n                );\r\n            });\r\n            WebSocketInstance.connect(newProps.chatId)\r\n            this.readMessages(newProps)\r\n\r\n            this.props.updateMessagesComponent()\r\n            this.setState({\r\n                messages: [],\r\n                scrolledToBottom: false,\r\n            })\r\n        }\r\n        if (this.state.otherUsername !== newProps.otherUsername) {\r\n            this.setState({\r\n                otherUsername: newProps.otherUsername\r\n            })\r\n        }\r\n        if (this.props.updateUnreadMessagesNumber) {\r\n            this.props.updateUnreadMessagesNumber()\r\n        }\r\n        if (this.state.otherUsername && !newProps.otherUsername) {\r\n            WebSocketInstance.disconnect()\r\n            this.setState({\r\n                otherUsername: undefined,\r\n                otherProfile: undefined\r\n            })\r\n        }\r\n    }\r\n\r\n    readMessages = props => {\r\n        fetch(`${SERVER_URL}/chat-api/read-messages`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'X-CSRFToken': csrftoken,\r\n            },\r\n            body: JSON.stringify({ chat_id: props.chatId })\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data)\r\n                WebSocketInstance.readMessages(this.props.chatId)\r\n            })\r\n    }\r\n\r\n    waitForSocketConnection(callback) {\r\n        const component = this;\r\n        setTimeout(function () {\r\n            if (WebSocketInstance.state() === 1) {\r\n                console.log(\"Connection is made\");\r\n                callback();\r\n                return;\r\n            } else {\r\n                console.log(\"wait for connection...\");\r\n                component.waitForSocketConnection(callback);\r\n            }\r\n        }, 100);\r\n    }\r\n\r\n    getMessages(messages) {\r\n        this.setState({ messages: messages.reverse() })\r\n    }\r\n\r\n    addMessage(message) {\r\n        this.setState({\r\n            messages: [...this.state.messages, message],\r\n            scrolledToBottom: false\r\n        })\r\n        this.readMessages(this.props)\r\n    }\r\n\r\n    scrollToBottom = () => {\r\n        if (document.querySelector('#chat-log')) {\r\n            const chatLog = document.querySelector('#chat-log')\r\n            chatLog.scrollTop = chatLog.scrollHeight\r\n            this.setState({\r\n                scrolledToBottom: true\r\n            })\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.otherProfile !== null || !this.props.otherUsername ?\r\n                    <>\r\n                        {this.state.otherProfile ?\r\n                            <div className=\"current-chat\">\r\n                                <div className=\"current-chat-header\">\r\n                                    <i class=\"fas fa-arrow-left left-arrow-icon\" onClick={() => window.history.back()} />\r\n                                    <Link to={`/user/${this.state.otherProfile.slug}`}>\r\n                                        <img src={`${SERVER_URL}${this.state.otherProfile.photo}`}\r\n                                            className=\"profile-img-sm\"\r\n                                            style={{ marginRight: '5px' }}\r\n                                        />\r\n                                    </Link>\r\n                                    <div className=\"d-flex flex-column align-items-start\" style={{ height: '52px' }}>\r\n                                        <strong>{this.state.otherProfile.first_name} {this.state.otherProfile.last_name}</strong>\r\n                                        <p className=\"text-secondary\">@{this.state.otherProfile.user.username}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div id=\"chat-log\">\r\n                                    {this.state.messages.map(message => {\r\n                                        return (\r\n                                            <MessageListItem message={message} currentUser={this.props.username} />\r\n                                        )\r\n                                    })\r\n                                    }\r\n                                </div>\r\n                                <SendMessageForm\r\n                                    WebSocketInstance={WebSocketInstance}\r\n                                    chatId={this.props.chatId}\r\n                                    username={this.props.username}\r\n                                    otherProfile={this.state.otherProfile}\r\n                                    myProfile={this.state.myProfile}\r\n                                    updateMessagesComponent={this.props.updateMessagesComponent}\r\n                                />\r\n                            </div>\r\n                            :\r\n                            <div className=\"current-chat no-chat-selected\">\r\n                                <div>\r\n                                    <strong style={{ fontSize: 'larger' }}>Você não tem uma conversa selecionada</strong>\r\n                                    <p className=\"text-secondary\">Selecione uma existente ou comece uma nova</p>\r\n                                    <button className=\"btn btn-primary\" onClick={() => this.props.openModal()}>Nova conversa</button>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </>\r\n                    :\r\n                    <div className=\"chat-loader-container\">\r\n                        <div className=\"loader\" />\r\n                    </div>\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chat\r\n"]},"metadata":{},"sourceType":"module"}