{"ast":null,"code":"import React from'react';import{Link}from'react-router-dom';import{SERVER_URL}from'../../../config/settings';export default function ContactListItem(props){var profile=props.profile;var activeChats=props.activeChats;var activeChatsProfiles=props.activeChatsProfiles;var unreadMessagesCounter;var lastChatMessage;var resetUnreadMessagesCounter=function resetUnreadMessagesCounter(){unreadMessagesCounter=0;};var incrementUnreadMessagesCounter=function incrementUnreadMessagesCounter(){unreadMessagesCounter++;};var setLastChatMessage=function setLastChatMessage(message){lastChatMessage=message;};return/*#__PURE__*/React.createElement(React.Fragment,null,profile!==undefined&&/*#__PURE__*/React.createElement(Link,{to:\"/mensagens/\".concat(profile.slug),style:{color:'#000',textDecoration:'none'}},resetUnreadMessagesCounter(),/*#__PURE__*/React.createElement(\"li\",{className:\"list-item profile-chat-item\",style:{whiteSpace:'nowrap'}},/*#__PURE__*/React.createElement(\"img\",{src:\"\".concat(SERVER_URL).concat(profile.photo),className:\"profile-img-med\",style:{marginRight:'10px'}}),/*#__PURE__*/React.createElement(\"div\",{className:\"d-flex flex-column align-items-start\"},/*#__PURE__*/React.createElement(\"div\",{className:\"d-flex\",style:{maxHeight:'30px'}},/*#__PURE__*/React.createElement(\"strong\",{style:{height:'fit-content'}},profile.first_name,\" \",profile.last_name),activeChats[activeChatsProfiles.indexOf(profile)].messages.map(function(message,i,messages){if(messages[messages.length-1]===message)setLastChatMessage(message.content);if(message.read||message.contact.user.username!==profile.user.username)return;incrementUnreadMessagesCounter();}),unreadMessagesCounter>0&&/*#__PURE__*/React.createElement(\"div\",{className:\"notification-text-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"notification-text\"},unreadMessagesCounter)),/*#__PURE__*/React.createElement(\"p\",{className:\"text-secondary\",style:{marginLeft:'5px'}},\"@\",profile.user.username)),/*#__PURE__*/React.createElement(\"p\",{className:\"text-secondary\"},lastChatMessage.slice(0,40))))));}","map":{"version":3,"sources":["C:/Users/fabio/CodeProjects/Django/napker/frontend/src/pages/messages_/components/ContactListItem.js"],"names":["React","Link","SERVER_URL","ContactListItem","props","profile","activeChats","activeChatsProfiles","unreadMessagesCounter","lastChatMessage","resetUnreadMessagesCounter","incrementUnreadMessagesCounter","setLastChatMessage","message","undefined","slug","color","textDecoration","whiteSpace","photo","marginRight","maxHeight","height","first_name","last_name","indexOf","messages","map","i","length","content","read","contact","user","username","marginLeft","slice"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,IAAT,KAAqB,kBAArB,CAEA,OAASC,UAAT,KAA2B,0BAA3B,CAEA,cAAe,SAASC,CAAAA,eAAT,CAAyBC,KAAzB,CAAgC,CAC3C,GAAMC,CAAAA,OAAO,CAAGD,KAAK,CAACC,OAAtB,CACA,GAAMC,CAAAA,WAAW,CAAGF,KAAK,CAACE,WAA1B,CACA,GAAMC,CAAAA,mBAAmB,CAAGH,KAAK,CAACG,mBAAlC,CACA,GAAIC,CAAAA,qBAAJ,CACA,GAAIC,CAAAA,eAAJ,CAEA,GAAMC,CAAAA,0BAA0B,CAAG,QAA7BA,CAAAA,0BAA6B,EAAM,CACrCF,qBAAqB,CAAG,CAAxB,CACH,CAFD,CAIA,GAAMG,CAAAA,8BAA8B,CAAG,QAAjCA,CAAAA,8BAAiC,EAAM,CACzCH,qBAAqB,GACxB,CAFD,CAIA,GAAMI,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,OAAO,CAAI,CAClCJ,eAAe,CAAGI,OAAlB,CACH,CAFD,CAIA,mBACI,wCACKR,OAAO,GAAKS,SAAZ,eACG,oBAAC,IAAD,EAAM,EAAE,sBAAgBT,OAAO,CAACU,IAAxB,CAAR,CAAwC,KAAK,CAAE,CAAEC,KAAK,CAAE,MAAT,CAAiBC,cAAc,CAAE,MAAjC,CAA/C,EACKP,0BAA0B,EAD/B,cAEI,0BAAI,SAAS,CAAC,6BAAd,CAA4C,KAAK,CAAE,CAAEQ,UAAU,CAAE,QAAd,CAAnD,eACI,2BAAK,GAAG,WAAKhB,UAAL,SAAkBG,OAAO,CAACc,KAA1B,CAAR,CACI,SAAS,CAAC,iBADd,CAEI,KAAK,CAAE,CAAEC,WAAW,CAAE,MAAf,CAFX,EADJ,cAKI,2BAAK,SAAS,CAAC,sCAAf,eACI,2BAAK,SAAS,CAAC,QAAf,CAAwB,KAAK,CAAE,CAAEC,SAAS,CAAE,MAAb,CAA/B,eACI,8BAAQ,KAAK,CAAE,CAAEC,MAAM,CAAE,aAAV,CAAf,EAA2CjB,OAAO,CAACkB,UAAnD,KAAgElB,OAAO,CAACmB,SAAxE,CADJ,CAEKlB,WAAW,CAACC,mBAAmB,CAACkB,OAApB,CAA4BpB,OAA5B,CAAD,CAAX,CAAkDqB,QAAlD,CAA2DC,GAA3D,CAA+D,SAACd,OAAD,CAAUe,CAAV,CAAaF,QAAb,CAA0B,CACtF,GAAIA,QAAQ,CAACA,QAAQ,CAACG,MAAT,CAAkB,CAAnB,CAAR,GAAkChB,OAAtC,CAA+CD,kBAAkB,CAACC,OAAO,CAACiB,OAAT,CAAlB,CAC/C,GAAIjB,OAAO,CAACkB,IAAR,EAAgBlB,OAAO,CAACmB,OAAR,CAAgBC,IAAhB,CAAqBC,QAArB,GAAkC7B,OAAO,CAAC4B,IAAR,CAAaC,QAAnE,CAA6E,OAC7EvB,8BAA8B,GACjC,CAJA,CAFL,CAOKH,qBAAqB,CAAG,CAAxB,eACG,2BAAK,SAAS,CAAC,6BAAf,eACI,2BAAK,SAAS,CAAC,mBAAf,EACKA,qBADL,CADJ,CARR,cAcI,yBAAG,SAAS,CAAC,gBAAb,CAA8B,KAAK,CAAE,CAAE2B,UAAU,CAAE,KAAd,CAArC,MAA8D9B,OAAO,CAAC4B,IAAR,CAAaC,QAA3E,CAdJ,CADJ,cAiBI,yBAAG,SAAS,CAAC,gBAAb,EAA+BzB,eAAe,CAAC2B,KAAhB,CAAsB,CAAtB,CAAyB,EAAzB,CAA/B,CAjBJ,CALJ,CAFJ,CAFR,CADJ,CAkCH","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { SERVER_URL } from '../../../config/settings'\r\n\r\nexport default function ContactListItem(props) {\r\n    const profile = props.profile\r\n    const activeChats = props.activeChats\r\n    const activeChatsProfiles = props.activeChatsProfiles\r\n    let unreadMessagesCounter\r\n    let lastChatMessage\r\n\r\n    const resetUnreadMessagesCounter = () => {\r\n        unreadMessagesCounter = 0\r\n    }\r\n\r\n    const incrementUnreadMessagesCounter = () => {\r\n        unreadMessagesCounter++\r\n    }\r\n\r\n    const setLastChatMessage = message => {\r\n        lastChatMessage = message\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {profile !== undefined &&\r\n                <Link to={`/mensagens/${profile.slug}`} style={{ color: '#000', textDecoration: 'none' }}>\r\n                    {resetUnreadMessagesCounter()}\r\n                    <li className=\"list-item profile-chat-item\" style={{ whiteSpace: 'nowrap' }}>\r\n                        <img src={`${SERVER_URL}${profile.photo}`}\r\n                            className=\"profile-img-med\"\r\n                            style={{ marginRight: '10px' }}\r\n                        />\r\n                        <div className=\"d-flex flex-column align-items-start\">\r\n                            <div className=\"d-flex\" style={{ maxHeight: '30px' }}>\r\n                                <strong style={{ height: 'fit-content' }}>{profile.first_name} {profile.last_name}</strong>\r\n                                {activeChats[activeChatsProfiles.indexOf(profile)].messages.map((message, i, messages) => {\r\n                                    if (messages[messages.length - 1] === message) setLastChatMessage(message.content)\r\n                                    if (message.read || message.contact.user.username !== profile.user.username) return\r\n                                    incrementUnreadMessagesCounter()\r\n                                })}\r\n                                {unreadMessagesCounter > 0 &&\r\n                                    <div className=\"notification-text-container\">\r\n                                        <div className=\"notification-text\">\r\n                                            {unreadMessagesCounter}\r\n                                        </div>\r\n                                    </div>\r\n                                }\r\n                                <p className=\"text-secondary\" style={{ marginLeft: '5px' }}>@{profile.user.username}</p>\r\n                            </div>\r\n                            <p className=\"text-secondary\">{lastChatMessage.slice(0, 40)}</p>\r\n                        </div>\r\n                    </li>\r\n                </Link>\r\n            }\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}