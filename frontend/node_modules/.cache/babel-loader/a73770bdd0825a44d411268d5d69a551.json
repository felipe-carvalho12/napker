{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Carlos\\\\napker\\\\frontend\\\\src\\\\pages\\\\messages_\\\\Messages.js\";\nimport React from 'react';\nimport { SERVER_URL } from '../../config/settings';\nimport Header from '../../components/fixed/header';\nimport ModalContactSearch from './components/ModalContactSearch';\nimport Chat from './components/chat_/Chat';\nimport ContactListItem from './components/ContactListItem';\nimport ContactFilterInput from './components/ContactFilterInput';\nimport BottomMenu from '../../components/fixed/bottom-menu/BottomMenu';\nimport WebSocketInstance from './Websocket';\nexport default class Messages extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.handleReceiveProps = props => {\n      if (props.match.params.slug) {\n        if (props.match.params.slug !== this.props.match.params.slug && WebSocketInstance.state() === 1) {\n          WebSocketInstance.disconnect();\n        }\n\n        const participants = {\n          username: this.state.username,\n          other_username: props.match.params.slug\n        };\n        fetch(`${SERVER_URL}/chat-api/chat-id/${JSON.stringify(participants)}`).then(response => response.json()).then(data => {\n          this.setState({\n            chatId: data['chat_id']\n          });\n        });\n      } else if (this.state.chatId) {\n        this.setState({\n          chatId: null\n        });\n      }\n    };\n\n    this.fetchActiveChatProfiles = () => {\n      fetch(`${SERVER_URL}/chat-api/active-chats-profiles`).then(response => response.json()).then(data => {\n        if (!this.state.username) return;\n\n        if (!this.hasFilteredProfiles) {\n          this.setState({\n            activeChats: data.chats,\n            activeChatsProfiles: data.profiles,\n            renderedActiveChatsProfiles: data.profiles\n          });\n        }\n      });\n    };\n\n    this.openModal = () => {\n      this.setState({\n        addingNewChat: true\n      });\n    };\n\n    this.state = {\n      myProfile: null,\n      username: null,\n      chatId: null,\n      activeChats: null,\n      activeChatsProfiles: null,\n      renderedActiveChatsProfiles: null,\n      addingNewChat: false,\n      modalProfiles: []\n    };\n    this.rerenderingInterval = null;\n    this.hasFilteredProfiles = false;\n  }\n\n  componentWillReceiveProps(newProps) {\n    if (newProps === this.props) return;\n    this.handleReceiveProps(newProps);\n  }\n\n  handleComponentChange() {\n    if (!this.state.username) {\n      fetch(`${SERVER_URL}/profile-api/logged-user`).then(response => response.json()).then(data => {\n        this.setState({\n          username: data.username\n        });\n\n        if (this.props.match.params.slug) {\n          this.handleReceiveProps(this.props);\n        }\n      });\n    }\n\n    if (!this.state.activeChatsProfiles && this.state.activeChatsProfiles !== []) {\n      this.fetchActiveChatProfiles();\n    }\n  }\n\n  componentWillMount() {\n    document.title = 'Mensagens / Napker';\n    this.handleComponentChange();\n    this.rerenderingInterval = window.setInterval(this.fetchActiveChatProfiles, 4000);\n  }\n\n  componentWillUnmount() {\n    window.clearInterval(this.rerenderingInterval);\n  }\n\n  componentDidUpdate() {\n    this.handleComponentChange();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n      page: \"Mensagens\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content d-flex messages-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalContactSearch, {\n      addingNewChat: this.state.addingNewChat,\n      setParentState: this.setState.bind(this),\n      modalProfiles: this.state.modalProfiles,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chats-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ContactFilterInput, {\n      activeChatsProfiles: this.state.activeChatsProfiles,\n      setHasFilteredProfiles: bool => this.hasFilteredProfiles = bool,\n      fetchActiveChatProfiles: this.fetchActiveChatProfiles,\n      setParentState: this.setState.bind(this),\n      openModal: this.openModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"list-group chats-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 25\n      }\n    }, this.state.renderedActiveChatsProfiles !== null ? this.state.renderedActiveChatsProfiles.map(profile => {\n      return /*#__PURE__*/React.createElement(ContactListItem, {\n        profile: profile,\n        activeChats: this.state.activeChats,\n        activeChatsProfiles: this.state.activeChatsProfiles,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 41\n        }\n      });\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"messages-loader-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 37\n      }\n    })))), /*#__PURE__*/React.createElement(Chat, {\n      username: this.state.username,\n      otherUsername: this.props.match.params.slug,\n      chatId: this.state.chatId,\n      openModal: this.openModal,\n      updateUnreadMessagesNumber: this.props.updateUnreadMessagesNumber,\n      updateMessagesComponent: this.fetchActiveChatProfiles,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }\n    })), !this.props.match.params.slug && /*#__PURE__*/React.createElement(BottomMenu, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Carlos/napker/frontend/src/pages/messages_/Messages.js"],"names":["React","SERVER_URL","Header","ModalContactSearch","Chat","ContactListItem","ContactFilterInput","BottomMenu","WebSocketInstance","Messages","Component","constructor","props","handleReceiveProps","match","params","slug","state","disconnect","participants","username","other_username","fetch","JSON","stringify","then","response","json","data","setState","chatId","fetchActiveChatProfiles","hasFilteredProfiles","activeChats","chats","activeChatsProfiles","profiles","renderedActiveChatsProfiles","openModal","addingNewChat","myProfile","modalProfiles","rerenderingInterval","componentWillReceiveProps","newProps","handleComponentChange","componentWillMount","document","title","window","setInterval","componentWillUnmount","clearInterval","componentDidUpdate","render","bind","bool","map","profile","updateUnreadMessagesNumber"],"mappings":"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","sourcesContent":["import React from 'react'\r\n\r\nimport { SERVER_URL } from '../../config/settings'\r\nimport Header from '../../components/fixed/header'\r\nimport ModalContactSearch from './components/ModalContactSearch'\r\nimport Chat from './components/chat_/Chat'\r\nimport ContactListItem from './components/ContactListItem'\r\nimport ContactFilterInput from './components/ContactFilterInput'\r\nimport BottomMenu from '../../components/fixed/bottom-menu/BottomMenu'\r\nimport WebSocketInstance from './Websocket'\r\n\r\nexport default class Messages extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            myProfile: null,\r\n            username: null,\r\n            chatId: null,\r\n            activeChats: null,\r\n            activeChatsProfiles: null,\r\n            renderedActiveChatsProfiles: null,\r\n            addingNewChat: false,\r\n            modalProfiles: [],\r\n        }\r\n        this.rerenderingInterval = null\r\n        this.hasFilteredProfiles = false\r\n    }\r\n\r\n    handleReceiveProps = props => {\r\n        if (props.match.params.slug) {\r\n            if (props.match.params.slug !== this.props.match.params.slug && WebSocketInstance.state() === 1) {\r\n                WebSocketInstance.disconnect()\r\n            }\r\n            const participants = { username: this.state.username, other_username: props.match.params.slug }\r\n            fetch(`${SERVER_URL}/chat-api/chat-id/${JSON.stringify(participants)}`)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    this.setState({ chatId: data['chat_id'] })\r\n                })\r\n        } else if (this.state.chatId) {\r\n            this.setState({\r\n                chatId: null\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(newProps) {\r\n        if (newProps === this.props) return\r\n        this.handleReceiveProps(newProps)\r\n    }\r\n\r\n    handleComponentChange() {\r\n        if (!this.state.username) {\r\n            fetch(`${SERVER_URL}/profile-api/logged-user`)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    this.setState({\r\n                        username: data.username\r\n                    })\r\n                    if (this.props.match.params.slug) {\r\n                        this.handleReceiveProps(this.props)\r\n                    }\r\n                })\r\n        }\r\n        if (!this.state.activeChatsProfiles && this.state.activeChatsProfiles !== []) {\r\n            this.fetchActiveChatProfiles()\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'Mensagens / Napker'\r\n        this.handleComponentChange()\r\n        this.rerenderingInterval = window.setInterval(this.fetchActiveChatProfiles, 4000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.clearInterval(this.rerenderingInterval)\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.handleComponentChange()\r\n    }\r\n\r\n    fetchActiveChatProfiles = () => {\r\n        fetch(`${SERVER_URL}/chat-api/active-chats-profiles`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (!this.state.username) return\r\n                if (!this.hasFilteredProfiles) {\r\n                    this.setState({\r\n                        activeChats: data.chats,\r\n                        activeChatsProfiles: data.profiles,\r\n                        renderedActiveChatsProfiles: data.profiles\r\n                    })\r\n                }\r\n            })\r\n    }\r\n\r\n    openModal = () => {\r\n        this.setState({\r\n            addingNewChat: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Header page=\"Mensagens\" />\r\n                <div className=\"content d-flex messages-wrapper\">\r\n                    <ModalContactSearch\r\n                        addingNewChat={this.state.addingNewChat}\r\n                        setParentState={this.setState.bind(this)}\r\n                        modalProfiles={this.state.modalProfiles}\r\n                    />\r\n                    <div className=\"chats-list\">\r\n                        <ContactFilterInput\r\n                            activeChatsProfiles={this.state.activeChatsProfiles}\r\n                            setHasFilteredProfiles={bool => this.hasFilteredProfiles = bool}\r\n                            fetchActiveChatProfiles={this.fetchActiveChatProfiles}\r\n                            setParentState={this.setState.bind(this)}\r\n                            openModal={this.openModal}\r\n                        />\r\n                        <div className=\"list-group chats-container\">\r\n                            {this.state.renderedActiveChatsProfiles !== null ?\r\n                                this.state.renderedActiveChatsProfiles.map(profile => {\r\n                                    return (\r\n                                        <ContactListItem\r\n                                            profile={profile}\r\n                                            activeChats={this.state.activeChats}\r\n                                            activeChatsProfiles={this.state.activeChatsProfiles}\r\n                                        />\r\n                                    )\r\n                                })\r\n                                :\r\n                                <div className=\"messages-loader-container\">\r\n                                    <div className=\"loader\" />\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <Chat\r\n                        username={this.state.username}\r\n                        otherUsername={this.props.match.params.slug}\r\n                        chatId={this.state.chatId}\r\n                        openModal={this.openModal}\r\n                        updateUnreadMessagesNumber={this.props.updateUnreadMessagesNumber}\r\n                        updateMessagesComponent={this.fetchActiveChatProfiles}\r\n                    />\r\n                </div>\r\n                {!this.props.match.params.slug &&\r\n                    <BottomMenu />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}