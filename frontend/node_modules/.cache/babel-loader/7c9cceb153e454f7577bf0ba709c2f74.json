{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\felip\\\\CodeProjects\\\\Web\\\\Napker\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\felip\\\\CodeProjects\\\\Web\\\\Napker\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\felip\\\\CodeProjects\\\\Web\\\\Napker\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\felip\\\\CodeProjects\\\\Web\\\\Napker\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from'react';import{SERVER_URL}from'../../config/settings';import Header from'../../components/fixed/header';import ModalContactSearch from'./components/ModalContactSearch';import Chat from'./components/Chat';import ContactListItem from'./components/ContactListItem';import ContactFilterInput from'./components/ContactFilterInput';var Messages=/*#__PURE__*/function(_React$Component){_inherits(Messages,_React$Component);var _super=_createSuper(Messages);function Messages(_props){var _this;_classCallCheck(this,Messages);_this=_super.call(this,_props);_this.handleReceiveProps=function(props){var participants={username:_this.state.username,other_username:props.match.params.slug};fetch(\"\".concat(SERVER_URL,\"/chat-api/chat-id/\").concat(JSON.stringify(participants))).then(function(response){return response.json();}).then(function(data){return _this.setState({chatId:data['chat_id']});});};_this.fetchActiveChatProfiles=function(){console.log('fetching...');fetch(\"\".concat(SERVER_URL,\"/chat-api/active-chats-profiles\")).then(function(response){return response.json();}).then(function(data){if(!_this.state.username)return;_this.setState({activeChats:data.chats.reverse(),activeChatsProfiles:data.profiles.reverse()});});};_this.openModal=function(){_this.setState({addingNewChat:true});};_this.state={myProfile:null,username:null,chatId:null,activeChats:null,activeChatsProfiles:null,addingNewChat:false,modalProfiles:[]};_this.rerenderingInterval=null;_this.hasFilteredProfiles=false;return _this;}_createClass(Messages,[{key:\"componentWillReceiveProps\",value:function componentWillReceiveProps(newProps){if(newProps===this.props)return;this.handleReceiveProps(newProps);}},{key:\"handleComponentChange\",value:function handleComponentChange(){var _this2=this;if(!this.state.username){fetch(\"\".concat(SERVER_URL,\"/profile-api/logged-user\")).then(function(response){return response.json();}).then(function(data){_this2.setState({username:data.username});if(_this2.props.match.params.slug){_this2.handleReceiveProps(_this2.props);}});}if(!this.state.activeChatsProfiles&&this.state.activeChatsProfiles!==[]){this.fetchActiveChatProfiles();}}},{key:\"componentWillMount\",value:function componentWillMount(){document.title='Mensagens / Napker';this.handleComponentChange();this.rerenderingInterval=window.setInterval(this.fetchActiveChatProfiles,3000);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){window.clearInterval(this.rerenderingInterval);}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){this.handleComponentChange();console.log(this.hasFilteredProfiles);if(!this.hasFilteredProfiles){this.rerenderingInterval=window.setInterval(this.fetchActiveChatProfiles,3000);}else{window.clearInterval(this.rerenderingInterval);}}},{key:\"render\",value:function render(){var _this3=this;return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Header,{page:\"Mensagens\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"content d-flex messages-wrapper\"},/*#__PURE__*/React.createElement(ModalContactSearch,{addingNewChat:this.state.addingNewChat,setParentState:this.setState.bind(this),modalProfiles:this.state.modalProfiles}),/*#__PURE__*/React.createElement(\"div\",{className:\"chats-list\"},/*#__PURE__*/React.createElement(ContactFilterInput,{activeChatsProfiles:this.state.activeChatsProfiles,setHasFilteredProfiles:function setHasFilteredProfiles(bool){return _this3.hasFilteredProfiles=bool;},fetchActiveChatProfiles:this.fetchActiveChatProfiles,setParentState:this.setState.bind(this),openModal:this.openModal}),/*#__PURE__*/React.createElement(\"div\",{className:\"list-group chats-container\"},this.state.activeChatsProfiles!==null?this.state.activeChatsProfiles.map(function(profile){return/*#__PURE__*/React.createElement(ContactListItem,{profile:profile,activeChats:_this3.state.activeChats,activeChatsProfiles:_this3.state.activeChatsProfiles});}):/*#__PURE__*/React.createElement(\"div\",{className:\"messages-loader-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"loader\"})))),/*#__PURE__*/React.createElement(Chat,{username:this.state.username,otherUsername:this.props.match.params.slug,chatId:this.state.chatId,openModal:this.openModal,updateUnreadMessagesNumber:this.props.updateUnreadMessagesNumber,updateMessagesComponent:this.fetchActiveChatProfiles})));}}]);return Messages;}(React.Component);export{Messages as default};","map":{"version":3,"sources":["C:/Users/felip/CodeProjects/Web/Napker/frontend/src/pages/messages_/Messages.js"],"names":["React","SERVER_URL","Header","ModalContactSearch","Chat","ContactListItem","ContactFilterInput","Messages","props","handleReceiveProps","participants","username","state","other_username","match","params","slug","fetch","JSON","stringify","then","response","json","data","setState","chatId","fetchActiveChatProfiles","console","log","activeChats","chats","reverse","activeChatsProfiles","profiles","openModal","addingNewChat","myProfile","modalProfiles","rerenderingInterval","hasFilteredProfiles","newProps","document","title","handleComponentChange","window","setInterval","clearInterval","bind","bool","map","profile","updateUnreadMessagesNumber","Component"],"mappings":"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","sourcesContent":["import React from 'react'\r\n\r\nimport { SERVER_URL } from '../../config/settings'\r\nimport Header from '../../components/fixed/header'\r\nimport ModalContactSearch from './components/ModalContactSearch'\r\nimport Chat from './components/Chat'\r\nimport ContactListItem from './components/ContactListItem'\r\nimport ContactFilterInput from './components/ContactFilterInput'\r\n\r\nexport default class Messages extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            myProfile: null,\r\n            username: null,\r\n            chatId: null,\r\n            activeChats: null,\r\n            activeChatsProfiles: null,\r\n            addingNewChat: false,\r\n            modalProfiles: [],\r\n        }\r\n        this.rerenderingInterval = null\r\n        this.hasFilteredProfiles = false\r\n    }\r\n\r\n    handleReceiveProps = props => {\r\n        const participants = { username: this.state.username, other_username: props.match.params.slug }\r\n        fetch(`${SERVER_URL}/chat-api/chat-id/${JSON.stringify(participants)}`)\r\n            .then(response => response.json())\r\n            .then(data => this.setState({\r\n                chatId: data['chat_id']\r\n            }))\r\n    }\r\n\r\n    componentWillReceiveProps(newProps) {\r\n        if (newProps === this.props) return\r\n        this.handleReceiveProps(newProps)\r\n    }\r\n\r\n    handleComponentChange() {\r\n        if (!this.state.username) {\r\n            fetch(`${SERVER_URL}/profile-api/logged-user`)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    this.setState({\r\n                        username: data.username\r\n                    })\r\n                    if (this.props.match.params.slug) {\r\n                        this.handleReceiveProps(this.props)\r\n                    }\r\n                })\r\n        }\r\n        if (!this.state.activeChatsProfiles && this.state.activeChatsProfiles !== []) {\r\n            this.fetchActiveChatProfiles()\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'Mensagens / Napker'\r\n        this.handleComponentChange()\r\n        this.rerenderingInterval = window.setInterval(this.fetchActiveChatProfiles, 3000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.clearInterval(this.rerenderingInterval)\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.handleComponentChange()\r\n        console.log(this.hasFilteredProfiles)\r\n        if (!this.hasFilteredProfiles) {\r\n            this.rerenderingInterval = window.setInterval(this.fetchActiveChatProfiles, 3000)\r\n        } else {\r\n            window.clearInterval(this.rerenderingInterval)\r\n        }\r\n    }\r\n\r\n    fetchActiveChatProfiles = () => {\r\n        console.log('fetching...')\r\n        fetch(`${SERVER_URL}/chat-api/active-chats-profiles`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (!this.state.username) return\r\n                this.setState({\r\n                    activeChats: data.chats.reverse(),\r\n                    activeChatsProfiles: data.profiles.reverse()\r\n                })\r\n            })\r\n    }\r\n\r\n    openModal = () => {\r\n        this.setState({\r\n            addingNewChat: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Header page=\"Mensagens\" />\r\n                <div className=\"content d-flex messages-wrapper\">\r\n                    <ModalContactSearch\r\n                        addingNewChat={this.state.addingNewChat}\r\n                        setParentState={this.setState.bind(this)}\r\n                        modalProfiles={this.state.modalProfiles}\r\n                    />\r\n                    <div className=\"chats-list\">\r\n                        <ContactFilterInput\r\n                            activeChatsProfiles={this.state.activeChatsProfiles}\r\n                            setHasFilteredProfiles={bool => this.hasFilteredProfiles = bool}\r\n                            fetchActiveChatProfiles={this.fetchActiveChatProfiles}\r\n                            setParentState={this.setState.bind(this)}\r\n                            openModal={this.openModal}\r\n                        />\r\n                        <div className=\"list-group chats-container\">\r\n                            {this.state.activeChatsProfiles !== null ?\r\n                                this.state.activeChatsProfiles.map(profile => {\r\n                                    return (\r\n                                        <ContactListItem\r\n                                            profile={profile}\r\n                                            activeChats={this.state.activeChats}\r\n                                            activeChatsProfiles={this.state.activeChatsProfiles}\r\n                                        />\r\n                                    )\r\n                                })\r\n                                :\r\n                                <div className=\"messages-loader-container\">\r\n                                    <div className=\"loader\" />\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <Chat\r\n                        username={this.state.username}\r\n                        otherUsername={this.props.match.params.slug}\r\n                        chatId={this.state.chatId}\r\n                        openModal={this.openModal}\r\n                        updateUnreadMessagesNumber={this.props.updateUnreadMessagesNumber}\r\n                        updateMessagesComponent={this.fetchActiveChatProfiles}\r\n                    />\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}